buildscript {

    def baseVersions = [
            kotlin        : '1.1.2',
            supportLibrary: '23.1.1',
    ]

    def pluginsVersions = [
            android: '2.1.2',
            androidMavenGradle: '1.5',
            gradleBintray: '1.7',
            kotlin : baseVersions.kotlin
    ]

    ext.javaVersions = [
            source: JavaVersion.VERSION_1_6,
            target: JavaVersion.VERSION_1_6
    ]

    ext.androidConstants = [
            buildToolsVersion: '24.0.0',
            compileSdk       : 24,
            minSdk           : 14,
            targetSdk        : 24
    ]

    ext.librariesVersions = [
            assertJ         : '1.7.1',
            h2              : '1.4.192',
            jUnit           : '4.12',
            kotlinReflect   : baseVersions.kotlin,
            kotlinStdlib    : baseVersions.kotlin,
            mockito         : '2.0.53-beta',
            mockitoKotlin   : '0.4.1',
            robolectric     : '3.0',
            rxJava1         : '1.2.0',
            sqliteJdbc      : '3.7.2',
            supportAppCompat: baseVersions.supportLibrary,
    ]

    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:${pluginsVersions.android}"
        classpath "com.github.dcendents:android-maven-gradle-plugin:${pluginsVersions.androidMavenGradle}"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:${pluginsVersions.gradleBintray}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${pluginsVersions.kotlin}"
    }
}


ext.falkonModules = [
        dao                 : project(':falkon-dao'),
        daoExtn             : project(':falkon-dao-extn'),
        engine              : project(':falkon-engine'),
        engineJdbc          : project(':falkon-engine-jdbc'),
        engineTestCommon    : project(':falkon-engine-test-common'),
        iterableUtils       : project(':falkon-iterable-utils'),
        mapper              : project(':falkon-mapper'),
        mapperBasic         : project(':falkon-mapper-basic'),
        mapperEnhanced      : project(':falkon-mapper-enhanced'),
        rxJava1             : project(':falkon-rxjava-1'),
        sqlBuilder          : project(':falkon-sql-builder'),
        sqlBuilderCommon    : project(':falkon-sql-builder-common'),
        sqlBuilderH2        : project(':falkon-sql-builder-h2'),
        sqlBuilderTestCommon: project(':falkon-sql-builder-test-common'),
        sqlBuilderSqlite    : project(':falkon-sql-builder-sqlite')
]

// Android projects could have been excluded. Check before adding them to `falkonModules` map
Project engineForAndroidSqliteProject = findProject(':falkon-engine-android-sqlite')
if (engineForAndroidSqliteProject != null) {
    ext.falkonModules['engineAndroidSqlite'] = engineForAndroidSqliteProject
}


ext.libraries = [
        assertJ         : "org.assertj:assertj-core:${librariesVersions.assertJ}",
        h2              : "com.h2database:h2:${librariesVersions.h2}",
        jUnit           : "junit:junit:${librariesVersions.jUnit}",
        kotlinReflect   : "org.jetbrains.kotlin:kotlin-reflect:${librariesVersions.kotlinReflect}",
        kotlinStdlib    : "org.jetbrains.kotlin:kotlin-stdlib:${librariesVersions.kotlinStdlib}",
        mockito         : "org.mockito:mockito-core:${librariesVersions.mockito}",
        mockitoKotlin   : "com.nhaarman:mockito-kotlin:${librariesVersions.mockitoKotlin}",
        robolectric     : "org.robolectric:robolectric:${librariesVersions.robolectric}",
        rxJava1         : "io.reactivex:rxjava:${librariesVersions.rxJava1}",
        sqliteJdbc      : "org.xerial:sqlite-jdbc:${librariesVersions.sqliteJdbc}",
        supportAppCompat: "com.android.support:appcompat-v7:${librariesVersions.supportAppCompat}",
]


subprojects {

    group = FALKON_GROUP
    version = FALKON_VERSION

    repositories {
        jcenter()
    }
}


task wrapper(type: Wrapper) {
    gradleVersion = '2.14'
}

// Task to upload all appropriately configured modules in a single stroke
task bintrayUploadAllProjects
subprojects {
    afterEvaluate {
        def bintrayUploadTask = project.tasks.findByPath("bintrayUpload")
        if (bintrayUploadTask != null) {
            bintrayUploadAllProjects.dependsOn(bintrayUploadTask)
        }
    }
}